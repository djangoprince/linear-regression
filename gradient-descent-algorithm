def linreg_gd(X, y):
    p=X.shape[1]
    m=X.shape[0]
    theta=np.zeros(p)
    alpha=0.01 # May have to be decreased
    maxiter=10000 # May have to be increased
    J = np.zeros(maxiter) # cost history
    for iter in range(maxiter):
        spa = np.dot(X, theta)
        skekkja = spa - y
        theta = theta - (1/m)*alpha * np.dot(X.T, skekkja)
        cost(J, skekkja, iter)
        if (iter%1000 == 0):
            print(theta)
    return theta, J

# Load the data
data=np.genfromtxt('Advertising_centered.csv', delimiter=',', skip_header=1) #Columns: x, y
n=data.shape[0]
# Construct data matrix for linear regression
# Model: y= _0 + _1*x_1 + ... + _p*x_p
y=data[:,-1] # Output variable is in the last column in this case
# Append a column of ones to the inputs (intercept term)
X=np.c_[np.ones(n), data[:,0:-1]] # Include all columns from 'data' except the last
# Visalize data
plt.scatter(X[:,1],y)
plt.xlabel('X')
plt.ylabel('Y')
plt.show()
# Call your function and report the theta values
t, J = linreg_gd(X, y)
print(t)
#print(J)
